plugins {
    id 'groovy'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

version = '1.19-0.2.0-SNAPSHOT'
group = 'ga.ozli.minecraftmods.groovylicious'
archivesBaseName = 'groovylicious'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: '1.18.2-2022.07.17-1.19'

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', archivesBaseName

            mods {
                groovylicious {
                    source sourceSets.main
                }
            }
        }

        client {}
        server { args '--nogui' }
    }
}

configurations {
    library
    implementation.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect({ it.absolutePath }).join(File.pathSeparator)
    }
}

sourceSets {
    transform {
        groovy {
            srcDir 'src/transform/groovy'
        }

        resources.srcDirs = []
        resources {
            srcDir 'src/transform/resources'
        }

        compileClasspath += configurations.getByName('minecraft')
    }

    extension {
        groovy {
            srcDir 'src/extension/groovy'
        }

        resources.srcDirs = []
        resources {
            srcDir 'src/extension/resources'
        }

        compileClasspath += configurations.getByName('minecraft')
    }

    main {
        groovy {
            srcDir 'src/main/groovy'
        }

        resources {
            srcDir 'src/main/resources'
            srcDir 'src/generated/resources'
        }

        compileClasspath += sourceSets.transform.output
        runtimeClasspath += sourceSets.transform.output

        compileClasspath += sourceSets.extension.output
        runtimeClasspath += sourceSets.extension.output
    }
}

// Groovylicious is written in pure Groovy, so delete the empty java folder in each of the sourceSets
sourceSets.each { sourceSet ->
    final javaDir = file("src/${sourceSet.name}/java/")
    javaDir.deleteDir()
}
// let's also delete the unused generated and test folders while we're at it
final generatedDir = file("src/generated/")
generatedDir.deleteDir()
final testDir = file("src/test/")
testDir.deleteDir()

repositories {
    maven {
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
//    maven {
//        name 'BlameJared'
//        url 'https://maven.blamejared.com'
//    }
    maven {
        name = 'Modding Inquisition Snapshots'
        url = 'https://maven.moddinginquisition.org/snapshots'
    }
}

dependencies {
    // Forge
    minecraft 'net.minecraftforge:forge:1.19-41.0.110'

    // Austin's Powerful Language Provider: Keeping it Groovy, baby!
    library compileOnly('net.thesilkminer.mc.austin:aplp-1.19:1.1.1') // main sourceSet
    library runtimeOnly('net.thesilkminer.mc.austin:aplp-1.19:1.1.1:all')
    library extensionCompileOnly('net.thesilkminer.mc.austin:aplp-1.19:1.1.1') // extension sourceSet
    library extensionRuntimeOnly('net.thesilkminer.mc.austin:aplp-1.19:1.1.1:all')
    library transformCompileOnly('net.thesilkminer.mc.austin:aplp-1.19:1.1.1') // transform sourceSet
    library transformRuntimeOnly('net.thesilkminer.mc.austin:aplp-1.19:1.1.1:all')

    // Ksyxis in dev env - speeds up initial server load times by lazy loading spawn chunks at
    // the cost of lag on the server when someone joins from previously empty - fine for me as
    // Groovylicious doesn't add any in-game APIs yet
    runtimeOnly 'curse.maven:ksyxis-537533:3502167'
}

processResources {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

ext {
    defaultManifest = [
            'Specification-Title': archivesBaseName,
            'Specification-Vendor': 'Paint_Ninja',
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor': 'Paint_Ninja',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

tasks.named('jar', Jar) {
    from sourceSets.transform.output
    from sourceSets.extension.output
    from sourceSets.main.output

    manifest {
        attributes(defaultManifest)
    }

    finalizedBy 'reobfJar'
}

//tasks.register('extensionsJar', Jar) {
//    from sourceSets.extension.output
//
//    manifest {
//        attributes(defaultManifest + [
//                'FMLModType': 'GAMELIBRARY'
//        ])
//    }
//
//    finalizedBy 'reobfJar'
//}

tasks.register('sourcesJar', Jar) {
    dependsOn compileGroovy

    archiveClassifier = 'sources'

    from sourceSets.transform.allSource
    from sourceSets.extension.allSource
    from sourceSets.main.allSource

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifacts = [jar, sourcesJar]
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/snapshots'
            credentials {
                username = findProperty('inquisitionMavenUser') ?: ''
                password = findProperty('inquisitionMavenPassword') ?: ''
            }
        }
    }
}

tasks.withType(GroovyCompile).configureEach { GroovyCompile task ->
    task.groovyOptions.fork = true
    task.groovyOptions.encoding = 'UTF-8'
    task.groovyOptions.optimizationOptions.indy = true
}

compileGroovy.groovyOptions.configurationScript = file('src/transform/groovy/ga/ozli/minecraftmods/groovylicious/transform/groovycConfig.groovy')
compileGroovy.groovyOptions.optimizationOptions.'groovydoc' = true