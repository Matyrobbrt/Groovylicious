buildscript {
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'groovy'
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = '1.18.2-0.1.0'
group = 'ga.ozli.minecraftmods.groovylicious'
archivesBaseName = 'groovylicious'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: '2022.06.05-1.18.2'

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'

            mods {
                groovylicious {
                    source sourceSets.main
                }
            }
        }

        client {}
        server { args '--nogui' }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect({ it.absolutePath }).join(File.pathSeparator)
    }
}

sourceSets {
    transform {
        groovy {
            srcDir 'src/transform/groovy'
        }

        resources.srcDirs = []
        compileClasspath += configurations.getByName('minecraft')
    }

    main {
        groovy {
            srcDir 'src/main/groovy'
        }

        resources {
            srcDir 'src/main/resources'
            srcDir 'src/generated/resources'
        }

        compileClasspath += sourceSets.transform.output
        runtimeClasspath += sourceSets.transform.output
    }
}

// Groovylicious is written in pure Groovy, so delete the empty java folder in each of the sourceSets
sourceSets.each { sourceSet ->
    final javaDir = file("src/${sourceSet.name}/java/")
    javaDir.deleteDir()
}
// let's also delete the unused generated and test folders while we're at it
final generatedDir = file("src/generated/")
generatedDir.deleteDir()
final testDir = file("src/test/")
testDir.deleteDir()

repositories {
    maven {
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com'
    }
}

dependencies {
    // Forge
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.45'

    // Austin's Powerful Language Provider: Keeping it Groovy, baby!
    implementation 'net.thesilkminer.mc.austin:aplp-1.18.2:1.0.1'
    transformImplementation 'net.thesilkminer.mc.austin:aplp-1.18.2:1.0.1'

    // Add Groovy to the game
    library 'org.apache.groovy:groovy:4.0.1'
    library 'org.apache.groovy:groovy-macro:4.0.1'
    library 'org.apache.groovy:groovy-macro-library:4.0.1'
    library 'org.apache.groovy:groovy-templates:4.0.1'
    library 'org.apache.groovy:groovy-typecheckers:4.0.1'
    library 'org.apache.groovy:groovy-groovydoc:4.0.1'
    library 'org.apache.groovy:groovy-contracts:4.0.1'

    // LazyDFU in dev env - speeds up initial load times at the cost of lag spikes in-game,
    // fine for me as Groovylicious doesn't add any in-game APIs yet
    runtimeOnly 'curse.maven:lazydfu-460819:3544496'

    // Ksyxis in dev env - speeds up initial server load times by lazy loading spawn chunks at
    // the cost of lag on the server when someone joins from previously empty - fine for me as
    // Groovylicious doesn't add any in-game APIs yet
    runtimeOnly 'curse.maven:ksyxis-537533:3502166'
}

processResources {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

jar {
    from sourceSets.transform.output
    from sourceSets.main.output

    manifest {
        attributes([
                'Specification-Title': 'Groovylicious',
                'Specification-Vendor': 'Paint_Ninja',
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor': 'Paint_Ninja',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(GroovyCompile).configureEach { GroovyCompile task ->
    task.groovyOptions.fork = true
    task.groovyOptions.encoding = 'UTF-8'
}

compileGroovy.groovyOptions.configurationScript = file('src/transform/groovy/ga/ozli/minecraftmods/groovylicious/transform/groovycConfig.groovy')
compileGroovy.groovyOptions.optimizationOptions.'groovydoc' = true